import asyncio

from aiogram import executor, types

from Keyboard.reply import kb_profile
from bot import dp
from handlers.main import register_handlers
from websocket import ws_connect

# Register handlers
register_handlers(dp)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç! –Ø –®–∏–∫–∏–ê–Ω–∏–º–µ BOT\n" +
                        f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –ø–æ –ø–æ–ª–Ω–æ–π, "
                        f"—Ç–µ–±–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å –®–∏–∫–∏–º–æ—Ä–∏\n"
                        f"–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É - <b>üòÅ My Profile</b>",
                        reply_markup=kb_profile, parse_mode="HTML")


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    asyncio.ensure_future(ws_connect())
    executor.start_polling(dp, skip_updates=True, loop=loop)
