from aiogram import executor, types, Dispatcher
import asyncio
from Keyboard.reply import kb_profile
from bot import dp, anilibria_client, bot
from handlers.main import register_handlers
from anilibria import Connect

# Register handlers
register_handlers(dp)


async def set_default_commands(dp: Dispatcher) -> None:
    await dp.bot.set_my_commands(
        [
            types.BotCommand("about", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
            types.BotCommand("commands", "–ú–µ–Ω—é —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—è–º–∏"),
        ]
    )


@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –®–∏–∫–∏–ê–Ω–∏–º–µ BOT\n" + f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –ø–æ –ø–æ–ª–Ω–æ–π, "
        f"—Ç–µ–±–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å –®–∏–∫–∏–º–æ—Ä–∏\n"
        f"–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É - <b>üòÅ Profile</b>",
        reply_markup=kb_profile,
    )


@anilibria_client.on(Connect)
async def on_connect(event: Connect):
    print("Connected to Anilibria Api")


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    asyncio.ensure_future(anilibria_client.astart(), loop=loop)
    executor.start_polling(
        dp, skip_updates=True, on_startup=set_default_commands, loop=loop
    )
