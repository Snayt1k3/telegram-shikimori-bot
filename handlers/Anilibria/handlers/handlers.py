from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext

from bot import anilibria_client
from database.repositories.anilibria import anilibria_repository
from Keyboard.anilibria import inline
from handlers.Anilibria.utils import message as msg_utils
from handlers.Anilibria.utils.states import AnimeFollow, AnimeGetTorrent


async def anime_follow_start(message: types.Message):
    """Standard start function for state"""
    await message.answer(
        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–π—Ç–ª–∞, –∞ —è –µ–≥–æ –ø–æ–∏—â—É.\n" "–ú–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å - /cancel"
    )
    await AnimeFollow.anime_title.set()


async def anime_follow_end(message: types.Message, state: FSMContext):
    """get anime_title, and insert into db"""
    data = await anilibria_client.search_titles([message.text])

    # validation data
    if not data.list:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await anilibria_repository.insert_anilibria_list(
        message.chat.id, "anilibria_search", data.list
    )

    await msg_utils.search_anime_msg(message)
    await state.finish()


async def all_follows(message: types.Message) -> None:
    """send list to user of his follows"""
    user_follows = await anilibria_repository.get_all_follows_by_user(message.chat.id)

    # check exists user follows
    if user_follows is None or not user_follows.follows:
        await message.answer(
            "–í—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ –Ω–µ–≤–µ–¥–µ–Ω–∏–∏ –æ –≤—ã—Ö–æ–¥–µ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π –ª—é–±–∏–º–æ–≥–æ –∞–Ω–∏–º–µ, "
            "—Ç–∞–∫ –∫–∞–∫ –∑–∞–±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. ü§≠"
        )
        return

    kb = await inline.all_follows_kb(user_follows.follows)

    await message.bot.send_photo(
        message.chat.id,
        open("misc/img/pic2.png", "rb"),
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –∞–Ω–∏–º–µ",
        reply_markup=kb,
    )


async def anime_get_torrent(message: types.Message):
    await message.answer(
        f"–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–π—Ç–ª–∞, –∞ —è –ø–æ–∏—â—É –µ–≥–æ.\n" f"–ú–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å - /cancel."
    )
    await AnimeGetTorrent.title.set()


async def get_torrent_title(message: types.Message, state: FSMContext):
    await state.finish()
    animes = await anilibria_client.search_titles([message.text])

    kb = await inline.torrent_kb(animes.list)

    await message.reply_photo(
        open("misc/img/pic2.png", "rb"),
        reply_markup=kb,
        caption=f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –∞–Ω–∏–º–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä—Ä–µ–Ω—Ç —Ñ–∞–π–ª.",
    )


def register_anilibria_handlers(dp: Dispatcher):
    dp.register_message_handler(get_torrent_title, state=AnimeGetTorrent.title)
    dp.register_message_handler(anime_follow_end, state=AnimeFollow.anime_title)
    dp.register_message_handler(
        anime_follow_start, lambda msg: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" in msg.text
    )
    dp.register_message_handler(all_follows, lambda msg: "–ü–æ–¥–ø–∏—Å–∫–∏" in msg.text)
    dp.register_message_handler(anime_get_torrent, lambda msg: "–¢–æ—Ä—Ä–µ–Ω—Ç" in msg.text)
